#!/bin/bash

# Dont allow unbound vars, this should be default eventually
set -u

# Set paths
export RNDIR=/opt/retronas
export RNDOC=${RNDIR}/doc
export USER_CONFIG=${RNDIR}/etc
export ANDIR=${RNDIR}/ansible
export ANCFG=${ANDIR}/retronas_vars.yml
export ANSIBLE_CONFIG=${ANDIR}/ansible.cfg
export DIDIR=${RNDIR}/dialog
export SCDIR=${RNDIR}/scripts
export PCHDIR=${SCDIR}/patch/
export LANGDIR=${RNDIR}/lang
export LIBDIR=${RNDIR}/lib
export LOGDIR=${RNDIR}/log
export CONFIGDIR=${RNDIR}/config
export TDIR=/dev/shm/retronas
export RNLANG="en"
export RNJSONOLD=${CONFIGDIR}/retronas.json
export RNJSON=${CONFIGDIR}/menu

# migrate to using etc for user config
export OLDAGREEMENT=${RNDIR}/user_agreement
export AGREEMENT=${USER_CONFIG}/user_agreement

[ -d "${TDIR}" ] && rm -rf "${TDIR}" 2>/dev/null
mkdir -p "${TDIR}" 2>/dev/null

# RetroNAS menu geometry
export MH="80"
export MW="24"
export MG="${MW} ${MH}"

if [ -f "${ANCFG}" ]
then
  # Find the current config items
  export OLDRNBRANCH=$(cd ${RNDIR};git branch | awk '/\*/{print $2}')
  # GOG Settings
  export OLDGOGOS="$( awk -F': ' '/^retronas_gog_os:/{gsub(/"/,"");print $2}' ${ANCFG} )"
  export OLDGOGLANG="$( awk -F': ' '/^retronas_gog_lang:/{gsub(/"/,"");print $2}' ${ANCFG} )"

	IFS=$'\n'
	for LINE in $(<${ANCFG})
	do
		IFS=": " read -r -a PIECES <<< $LINE
		VALUE=${PIECES[1]//\"/}
		case ${PIECES[0]} in
		  retronas_user)
			  OLDRNUSER=$VALUE
			  ;;
		  retronas_group)
			  OLDRNGROUP=$VALUE
			  ;;
		  retronas_path)
			  OLDRNPATH=$VALUE
			  ;;
		  retronas_net_3dsqr_interface)
			  OLD3DSIF=$VALUE
			  ;;
		  retronas_etherdfs_interface)
			  OLDETHERDFSIF=$VALUE
			  ;;
		  retronas_net_retro_interface)
			  OLDRETROIF=$VALUE
			  ;;
		  retronas_net_modern_interface)
			  OLDMODERNIF=$VALUE
			  ;;
		  retronas_net_retro_dhcprange)
			  OLDRETRODHCP=$VALUE
			  ;;
		  retronas_net_retro_router)
			  OLDRETROROUTER=$VALUE
			  ;;
		  retronas_net_retro_ntp)
			  OLDRETRONTP=$VALUE
			  ;;
		  retronas_net_retro_dns)
			  OLDRETRODNS=$VALUE
			  ;;
		  retronas_net_retro_ip)
			  OLDRETROIP=$VALUE
			  ;;
		  retronas_net_retro_subnet)
			  OLDRETROSUBNET=$VALUE
			  ;;
		  retronas_net_upstream_dns1)
			  OLDUPDNS1=$VALUE
			  ;;
		  retronas_net_upstream_dns2)
			  OLDUPDNS2=$VALUE
			  ;;
		  retronas_net_wifi_interface)
			  OLDWIFIINT=$VALUE
			  ;;
		  retronas_net_wifi_ssid)
			  OLDWIFISSID=$VALUE
			  ;;
		  retronas_net_wifi_channel)
			  OLDWIFICHANNEL=$VALUE
			  ;;
		  retronas_net_wifi_hwmode)
			  OLDWIFIHWMODE=$VALUE
			  ;;
		  retronas_net_wifi_countrycode)
			  OLDWIFICC=$VALUE
			  ;;
		  retronas_net_wifi_ip)
			  OLDWIFIIP=$VALUE
			  ;;
		  retronas_net_wifi_subnet)
			  OLDWIFISUBNET=$VALUE
			  ;;
		  retronas_net_wifi_dhcprange)
			  OLDWIFIDHCP=$VALUE
			  ;;
		  retronas_net_wifi_router)
			  OLDWIFIROUTER=$VALUE
			  ;;
		  retronas_net_wifi_ntp)
			  OLDWIFINTP=$VALUE
			  ;;
		  retronas_net_wifi_dns)
			  OLDWIFIDNS=$VALUE
			  ;;
		esac
	done
fi

# Find IPs
#export MY_IPS=$( ip a | grep 'inet ' | awk '/inet/{print $2}' | awk -F '/' '{print $1}' | grep -v ^127  )
export MY_IPV4=$( ip -4 -br a | awk '!/127/{sub(/\/[0-9].+$/, ""); print $3}' )
export MY_IPV6=$( ip -6 -br a | awk '!/::1/{sub(/\/[0-9].+$/, ""); print $3}' )
export MY_IPS=( $MY_IPV4 $MY_IPV6 )


# Set some messages
export APPNAME="RetroNAS"
export PAUSEMSG='Press [Enter] to continue...'
export IPADDMSG="IP: ${MY_IPS}"


# reset this at the end here so it doesn't screw existing scripts
set +u
